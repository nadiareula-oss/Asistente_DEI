import streamlit as st
import google.generativeai as genai
import time

# --- 1. CONFIGURACI√ìN INICIAL ---
st.set_page_config(page_title="Asistente de Revisi√≥n DEI", page_icon="üí¨")

# --- 2. TU PROMPT (AHORA MUCHO M√ÅS CORTO) ---
# El conocimiento ahora vendr√° del archivo. El prompt solo da las instrucciones.
SYSTEM_PROMPT = """
# ROL Y MISI√ìN
Act√∫a como un Asistente Experto en Comunicaci√≥n Inclusiva. Tu misi√≥n es revisar el texto del usuario para asegurar que cumple con el documento de conocimiento proporcionado (MANUAL DE DIVERSIDAD, EQUIDAD E INCLUSI√ìN). Eres un guardi√°n de nuestros valores de profesionalismo y respeto.

# TAREA Y FORMATO DE RESPUESTA
Cuando un usuario te env√≠e un texto para revisar, bas√°ndote EXCLUSIVAMENTE en el manual proporcionado, sigue ESTRICTAMENTE estos 3 pasos:

1.  **IDENTIFICAR ERRORES:** Analiza el texto e identifica cualquier palabra o frase que no se alinee con el manual.
2.  **EXPLICAR AJUSTES:** Explica de forma clara y constructiva por qu√© esos elementos son problem√°ticos, citando el principio del manual si es posible, y sugiere alternativas.
3.  **PROPONER TEXTO MEJORADO:** Ofrece la versi√≥n final del texto, corregida y mejorada.

Si el texto ya es perfecto, felicita al usuario y expl√≠cale por qu√© cumple con las buenas pr√°cticas.

# EJEMPLOS DE ENTRENAMIENTO
A continuaci√≥n, te presento ejemplos de c√≥mo debes actuar.
---
### **EJEMPLO 1: Anuncio de B√∫squeda Laboral**
**Texto de ejemplo a revisar:** "Se busca un hombre para el puesto de asistente de dep√≥sito. Es requisito ser fuerte."
**Tu respuesta ideal:**
¬°Hola! He revisado tu texto. Aqu√≠ tienes algunas sugerencias:
* En la frase "Se busca un hombre..."
    * **Observaci√≥n:** Al especificar un g√©nero, excluimos talento. El manual recomienda usar lenguaje neutro.
    * **Sugerencia:** Podemos iniciar con **"Buscamos una persona..."**.
* Sobre la parte "Es requisito ser fuerte..."
    * **Observaci√≥n:** El manual recomienda enfocarse en tareas concretas, no en atributos personales subjetivos.
    * **Sugerencia:** Podemos describirlo como **"Las responsabilidades incluyen el movimiento de equipamiento pesado."**.
---
**Propuesta de texto completo mejorado:**
"Buscamos una persona para el puesto de asistente de dep√≥sito. Las responsabilidades incluyen el movimiento de equipamiento pesado."
¬°Buen trabajo al detallar los requisitos! Con estos ajustes queda impecable.
---
"""

# --- 3. CONFIGURACI√ìN DEL MODELO Y SECRETS ---
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception:
    st.error("Error al configurar la API de Google. Aseg√∫rate de haber a√±adido tu clave de API a los secretos de Streamlit.")
    st.stop()

# --- 4. GESTI√ìN DEL ARCHIVO DE CONOCIMIENTO ---
# Usamos el cache de Streamlit para subir el archivo a Google solo una vez.
@st.cache_resource
def upload_file_to_google(filepath):
    try:
        with st.spinner(f"Indexando el manual de conocimiento... por favor espera."):
            file = genai.upload_file(path=filepath, display_name="Manual DEI")
            # Esperar a que el archivo est√© procesado
            while file.state.name == "PROCESSING":
                time.sleep(2)
                file = genai.get_file(file.name)
            if file.state.name == "FAILED":
                 raise ValueError("El procesamiento del archivo fall√≥.")
            return file
    except Exception as e:
        st.error(f"No se pudo cargar el manual de conocimiento: {e}")
        st.stop()

# --- 5. L√ìGICA DE LA APLICACI√ìN ---
st.title("Asistente de Revisi√≥n DEI üí¨")
st.write("Escribe el texto que deseas revisar. Te dar√© sugerencias basadas en nuestro Manual de Diversidad, Equidad e Inclusi√≥n.")

# Subir y procesar el archivo de conocimiento
# Aseg√∫rate de que el archivo 'DEI_Manual.txt' est√° en tu repositorio de GitHub
try:
    dei_file = upload_file_to_google("DEI_Manual.txt")
except FileNotFoundError:
    st.error("Error: No se encontr√≥ el archivo 'DEI_Manual.txt'. Aseg√∫rate de que est√© subido a tu repositorio de GitHub.")
    st.stop()

# Inicializar el modelo con el prompt del sistema
model = genai.GenerativeModel(
    model_name='gemini-1.5-pro-latest',
    system_instruction=SYSTEM_PROMPT
)

# Inicializar historial de chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Mostrar mensajes previos
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input del usuario
if prompt := st.chat_input("Escribe tu texto aqu√≠..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.spinner("Analizando con la gu√≠a DEI..."):
        # Enviar el mensaje al modelo, AHORA INCLUYENDO EL ARCHIVO como contexto
        response = model.generate_content([dei_file, prompt])
        
        # Mostrar la respuesta
        with st.chat_message("assistant"):
            st.markdown(response.text)
        st.session_state.messages.append({"role": "assistant", "content": response.text})
